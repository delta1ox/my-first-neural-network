# -*- coding: utf-8 -*-
"""First Neural network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NbEuLAMoKp994Ql_4eKXJqLj5-z5oIfq

Building a simple neural network using pytorch with a single neuron, where it has two inputs a and b and produces the result c
"""

import torch
from torch import nn
import random

"""defining a mystery function
convert it to a tensor
"""

def mystery(a,b):
  return torch.tensor(a+3*b)

"""Build a neural network using pytorch
nn - neural network
Sequential - Sequential in PyTorch is a container or a way to organize different neural network layers in a sequence. It allows you to build a neural network model by stacking multiple layers together, one after another
(2,1) - 2 inputs and 1 output
"""

model = nn.Sequential(nn.Linear(2,1))
print(model)



"""Training the neural network,
three parts,1)to check how well the neural network is doing, tht=at is the critera
"""

critereon = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum = 0.9)

for i in range(1000):
  a = random.random()
  b = random.random()
  desiredOutput = mystery(a,b)

  output = model(torch.tensor([a,b]))
  loss = critereon(output.squeeze(), desiredOutput)

  if (i % 100) == 0:
    print(f"Loss: ({loss.item()})")

  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

a = 1.0
b = -1.0
output = model(torch.tensor([a,b]))
print(output.item())

mystery(a,b)